#ifndef _TENSORS_XH_
#define _TENSORS_XH_

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <pthread.h>

char edu_umn_cs_melt_exts_ableC_tensorAlgebra;
char* __tensor_location;

#ifdef TACO_PARALLEL
char edu_umn_cs_melt_exts_ableC_tensorAlgebra_parallel;

#ifdef TACO_THREADS
unsigned int edu_umn_cs_melt_exts_ableC_tensorAlgebra_threads = TACO_THREADS;
#endif

#endif


struct __attribute__((refId("edu:umn:cs:melt:exts:ableC:tensorAlgebra:tensor_acc"))) tensor_acc {
  int x;
};

struct __attribute__((refId("edu:umn:cs:melt:exts:ableC:tensorAlgebra:tensor_indexvar"))) tensor_indexvar {
  int x;
};

struct __tensor_tree {
  char isLeaf;
  double val;
  unsigned long index;
  unsigned long numChildren;
  struct __tensor_tree* children; // Headed linked list
  struct __tensor_tree* next;
};

static void __free_tensor_tree(struct __tensor_tree* t) {
  if(t->children) __free_tensor_tree(t->children);
  if(t->next) __free_tensor_tree(t->next);
  free(t);
}

char* _get_extension(char* fileName) {
  char* end = fileName + strlen(fileName) - 1; // last character
  while(*end != '.') end--;
  return end+1; // not the '.'
}

struct __new_elem {
  unsigned long* idx;
  double val;
  struct __new_elem* next;
};

template<a>
a _read_mtx(char* fileName) {
  FILE* file = fopen(fileName, "r");
  if(!file) {
    fprintf(stderr, "Could not open file '%s'\n", fileName);
    exit(1);
  }

  char data[32];
  char fmt[32];  
  char dataType;
  char formatType;

  if(fscanf(file, "%%%%MatrixMarket matrix coordinate %s %s\n", data, fmt) != 2) {
    fprintf(stderr, "File is not a MatrixMarket format\n");
    fclose(file);
    exit(1);
  }

  if(strcmp(data, "real") == 0) {
    dataType = 0;
  } else if(strcmp(data, "integer") == 0) {
    dataType = 1;
  } else if(strcmp(data, "complex") == 0) {
    fprintf(stderr, "Complex numbers are not supported in tensors\n");
    fclose(file);
    exit(1);
  } else {
    fprintf(stderr, "Data type specifier '%s' is not recognized.\n", data);
    fclose(file);
    exit(1);
  }
  
  if(strcmp(fmt, "general") == 0) {
    formatType = 0;
  } else if(strcmp(fmt, "symmetric") == 0) {
    formatType = 1;
  } else if(strcmp(fmt, "skew-symmetric") == 0) {
    formatType = 1;
  } else if(strcmp(fmt, "hermitian") == 0) {
    fprintf(stderr, "Complex numbers are not supported in tensors\n");
    fclose(file);
    exit(1);
  } else {
    fprintf(stderr, "Symmetry specifer '%s' is not recognized.\n", fmt);
    fclose(file);
    exit(1);
  }
 
  char* line = calloc(128, sizeof(char));
  
  fgets(line, 128, file);
  while(!feof(file) && line[0] == '%') {
    fgets(line, 128, file);
  }
  if(feof(file)) {
    fprintf(stderr, "End of MTX file reached without dimension specifier.\n");
    fclose(file);
    free(line);
    exit(1);
  }

  unsigned long rows, cols, entries;
  if(sscanf(line, "%lu %lu %lu", &rows, &cols, &entries) != 3) {
    fprintf(stderr, "Matrix size specifier line is not valid.\n");
    fclose(file);
    free(line);
    exit(1);
  }
  free(line);
  
  unsigned long arr[] = {rows, cols};
  a res = build(a)(arr);
  
  double val;
  unsigned long idx[] = {0, 0};

  struct __new_elem header = {0};
  struct __new_elem* elem;

  for(unsigned long i = 0; i < entries; i++) {
    if(feof(file)) {
      fprintf(stderr, "End of file reached without finding appropriate number of elements\n");
      fclose(file);
      freeTensor(res);
      
      struct __new_elem* curr = header.next;
      struct __new_elem* tmp;
      while(curr) {
        tmp = curr;
        curr = tmp->next;
        free(tmp->idx);
        free(tmp);
      }

      exit(1);
    }
    
    if(fscanf(file, "%lu %lu %le\n", idx, idx+1, &val) != 3) {
      fprintf(stderr, "Element specifier is not correct format\n");
      fclose(file);
      freeTensor(res);
      
      struct __new_elem* curr = header.next;
      struct __new_elem* tmp;
      while(curr) {
        tmp = curr;
        curr = tmp->next;
        free(tmp->idx);
        free(tmp);
      }

      exit(1);
    }

    elem = calloc(1, sizeof(struct __new_elem));
    elem->idx = calloc(2, sizeof(unsigned long));
    elem->idx[0] = idx[0] - 1;
    elem->idx[1] = idx[1] - 1;
    elem->val = val;
    elem->next = header.next;
    header.next = elem;

    if(formatType == 1) {
      elem = calloc(1, sizeof(struct __new_elem));
      elem->idx = calloc(2, sizeof(unsigned long));
      elem->idx[0] = idx[1] - 1;
      elem->idx[1] = idx[0] - 1;
      elem->val = val;
      elem->next = header.next;
      header.next = elem;
    }
  }

  fclose(file);

  struct __new_elem* curr = header.next;
  struct __new_elem* tmp;
  while(curr) {
    res[curr->idx] = curr->val;
    tmp = curr;
    curr = tmp->next;
    free(tmp->idx);
    free(tmp);
  }

  return res;
}

template <a>
a _read_tns(char* fileName) {
  FILE* file = fopen(fileName, "r");
  if(!file) {
    fprintf(stderr, "Could not open file '%s'\n", fileName);
    exit(1);
  }

  unsigned long* dims = calloc(orderof(a), sizeof(unsigned long));
  
  struct __new_elem header = {0};

  double val;
  unsigned long* idx = calloc(orderof(a), sizeof(unsigned long));
  char* line = calloc(128, sizeof(char));

  fgets(line, 128, file);
  while(!feof(file)) {
    if(line[0] == '#') {;} 
    else {
      long bytes = 0;
      int newBytes = 0;
      for(unsigned long i = 0; i < orderof(a); i++) {
        if(sscanf(line + bytes, "%lu%n", idx + i, &newBytes) != 1) { // %n is number of bytes consumed. Not counted in return
          fprintf(stderr, "Error in parsing .tns file, reached end of index before expected.\n");
          fclose(file);
          free(dims);
          free(idx);
          free(line);
	  
          struct __new_elem* curr = header.next;
          struct __new_elem* tmp;
          while(curr) {
            tmp = curr;
            curr = tmp->next;
            free(tmp->idx);
            free(tmp);
          }
          
          exit(1);
        }
        bytes += newBytes;

        if(idx[i] > dims[i]) dims[i] = idx[i];
        idx[i]--; // .tns stores 1 based indices
      }

      if(sscanf(line + bytes, "%le", &val) != 1) {
        fprintf(stderr, "Error in parsing .tns file, did not find floating point value\n");
        fclose(file);
        free(dims);
        free(idx);
        free(line);
	
        struct __new_elem* curr = header.next;
        struct __new_elem* tmp;
        while(curr) {
          tmp = curr;
          curr = tmp->next;
          free(tmp->idx);
          free(tmp);
        }

        exit(1);
      }

      struct __new_elem* elem = calloc(1, sizeof(struct __new_elem));
      elem->idx = calloc(orderof(a), sizeof(unsigned long));
      memcpy(elem->idx, idx, sizeof(unsigned long) * orderof(a));
      elem->val = val;
      elem->next = header.next;
      header.next = elem;
    }
    fgets(line, 128, file);
  }

  a res = build(a)(dims);

  struct __new_elem* curr = header.next;
  struct __new_elem* tmp;
  while(curr) {
    res[curr->idx] = curr->val;
    tmp = curr;
    curr = tmp->next;
    free(tmp->idx);
    free(tmp);
  }

  fclose(file);
  free(dims);
  free(idx);
  free(line);
  return res;
}

template<a>
a read_tensor(char* fileName) {
  char* ext = _get_extension(fileName);
  
  a res;
  if(strcmp(ext, "mtx") == 0 || strcmp(ext, "ttx") == 0) {
    if(orderof(a) != 2) {
      fprintf(stderr, "MatrixMarket format supports only matrices. Cannot load a %d order tensor\n", orderof(a));
      exit(1);
    }
    res = inst _read_mtx<a>(fileName);
  } else if(strcmp(ext, "tns") == 0) {
    res = inst _read_tns<a>(fileName);
  } else {
    fprintf(stderr, "Unknown file extension for tensor: %s\n", ext);
    exit(1);
  }
  
  return res;
}

template<a>
void _write_mtx(char* fileName, a tns) {
  FILE* file = fopen(fileName, "w");
  if(!file) {
    fprintf(stderr, "Could not open file '%s'\n", fileName);
    exit(1);
  }

  // The parenthesis below prevent compile time error checking
  fprintf(file, "%%%%MatrixMarket matrix coordinate real general\n");
  fprintf(file, "%lu %lu %lu\n", dimenof(tns)[(0)], dimenof(tns)[(1)], tns.dataLen);

  unsigned long count = 0;
  foreach(double v : tns) {
    fprintf(file, "%lu %lu %le\n", index[0]+1, index[1]+1, v);
    count++;
  }

  // TODO: For debug only
  if(count != tns.dataLen)
    fprintf(stderr, "Wrong!!!\n");

  fclose(file);
}

template<a>
void _write_tns(char* fileName, a tns) {
  FILE* file = fopen(fileName, "w");
  if(!file) {
    fprintf(stderr, "Could not open file '%s'\n", fileName);
    exit(1);
  }

  foreach(double v : tns) {
    for(int c = 0; c < orderof(a); c++) {
      fprintf(file, "%lu ", index[c]+1);
    }
    fprintf(file, "%le\n", v);
  }

  fclose(file);
}

template<a>
void write_tensor(char* fileName, a* tns) {
  char* ext = _get_extension(fileName);
  unsigned long arr[orderof(a)];
  memset(arr, 0, sizeof(unsigned long) * orderof(a));
  (*tns)[arr];
  a tmp = *tns;
  a tnsor = {0};
  tnsor = tmp;

  if(strcmp(ext, "mtx") == 0 || strcmp(ext, "ttx") == 0) {
    if(orderof(a) != 2) {
      fprintf(stderr, "MatrixMarket format supports only matrices. Cannot write a %d order tensor\n", orderof(a));
      exit(1);
    }
    inst _write_mtx<a>(fileName, tnsor);
  } else if(strcmp(ext, "tns") == 0) {
    inst _write_tns<a>(fileName, tnsor);
  } else {
    fprintf(stderr, "Unknown file extension for tensor: %s\n", ext);
    exit(1);
  }

  freeTensor(tnsor);
}

#endif
