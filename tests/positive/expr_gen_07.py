def write_start(file):
  file.write('#include "tensors.xh"\n')
  file.write('\n')
  file.write('tensor format s0s1s2 = ({sparse, sparse, sparse}, {0, 1, 2});\n')
  file.write('tensor format s0s1d2 = ({sparse, sparse,  dense}, {0, 1, 2});\n')
  file.write('tensor format s0d1s2 = ({sparse,  dense, sparse}, {0, 1, 2});\n')
  file.write('tensor format s0d1d2 = ({sparse,  dense,  dense}, {0, 1, 2});\n')
  file.write('tensor format d0s1s2 = ({ dense, sparse, sparse}, {0, 1, 2});\n')
  file.write('tensor format d0s1d2 = ({ dense, sparse,  dense}, {0, 1, 2});\n')
  file.write('tensor format d0d1s2 = ({ dense,  dense, sparse}, {0, 1, 2});\n')
  file.write('tensor format d0d1d2 = ({ dense,  dense,  dense}, {0, 1, 2});\n')
  file.write('tensor format s0s2s1 = ({sparse, sparse, sparse}, {0, 2, 1});\n')
  file.write('tensor format s0s2d1 = ({sparse, sparse,  dense}, {0, 2, 1});\n')
  file.write('tensor format s0d2s1 = ({sparse,  dense, sparse}, {0, 2, 1});\n')
  file.write('tensor format s0d2d1 = ({sparse,  dense,  dense}, {0, 2, 1});\n')
  file.write('tensor format d0s2s1 = ({ dense, sparse, sparse}, {0, 2, 1});\n')
  file.write('tensor format d0s2d1 = ({ dense, sparse,  dense}, {0, 2, 1});\n')
  file.write('tensor format d0d2s1 = ({ dense,  dense, sparse}, {0, 2, 1});\n')
  file.write('tensor format d0d2d1 = ({ dense,  dense,  dense}, {0, 2, 1});\n')
  file.write('tensor format s1s0s2 = ({sparse, sparse, sparse}, {1, 0, 2});\n')
  file.write('tensor format s1s0d2 = ({sparse, sparse,  dense}, {1, 0, 2});\n')
  file.write('tensor format s1d0s2 = ({sparse,  dense, sparse}, {1, 0, 2});\n')
  file.write('tensor format s1d0d2 = ({sparse,  dense,  dense}, {1, 0, 2});\n')
  file.write('tensor format d1s0s2 = ({ dense, sparse, sparse}, {1, 0, 2});\n')
  file.write('tensor format d1s0d2 = ({ dense, sparse,  dense}, {1, 0, 2});\n')
  file.write('tensor format d1d0s2 = ({ dense,  dense, sparse}, {1, 0, 2});\n')
  file.write('tensor format d1d0d2 = ({ dense,  dense,  dense}, {1, 0, 2});\n')
  file.write('tensor format s1s2s0 = ({sparse, sparse, sparse}, {1, 2, 0});\n')
  file.write('tensor format s1s2d0 = ({sparse, sparse,  dense}, {1, 2, 0});\n')
  file.write('tensor format s1d2s0 = ({sparse,  dense, sparse}, {1, 2, 0});\n')
  file.write('tensor format s1d2d0 = ({sparse,  dense,  dense}, {1, 2, 0});\n')
  file.write('tensor format d1s2s0 = ({ dense, sparse, sparse}, {1, 2, 0});\n')
  file.write('tensor format d1s2d0 = ({ dense, sparse,  dense}, {1, 2, 0});\n')
  file.write('tensor format d1d2s0 = ({ dense,  dense, sparse}, {1, 2, 0});\n')
  file.write('tensor format d1d2d0 = ({ dense,  dense,  dense}, {1, 2, 0});\n')
  file.write('tensor format s2s0s1 = ({sparse, sparse, sparse}, {2, 0, 1});\n')
  file.write('tensor format s2s0d1 = ({sparse, sparse,  dense}, {2, 0, 1});\n')
  file.write('tensor format s2d0s1 = ({sparse,  dense, sparse}, {2, 0, 1});\n')
  file.write('tensor format s2d0d1 = ({sparse,  dense,  dense}, {2, 0, 1});\n')
  file.write('tensor format d2s0s1 = ({ dense, sparse, sparse}, {2, 0, 1});\n')
  file.write('tensor format d2s0d1 = ({ dense, sparse,  dense}, {2, 0, 1});\n')
  file.write('tensor format d2d0s1 = ({ dense,  dense, sparse}, {2, 0, 1});\n')
  file.write('tensor format d2d0d1 = ({ dense,  dense,  dense}, {2, 0, 1});\n')
  file.write('tensor format s2s1s0 = ({sparse, sparse, sparse}, {2, 1, 0});\n')
  file.write('tensor format s2s1d0 = ({sparse, sparse,  dense}, {2, 1, 0});\n')
  file.write('tensor format s2d1s0 = ({sparse,  dense, sparse}, {2, 1, 0});\n')
  file.write('tensor format s2d1d0 = ({sparse,  dense,  dense}, {2, 1, 0});\n')
  file.write('tensor format d2s1s0 = ({ dense, sparse, sparse}, {2, 1, 0});\n')
  file.write('tensor format d2s1d0 = ({ dense, sparse,  dense}, {2, 1, 0});\n')
  file.write('tensor format d2d1s0 = ({ dense,  dense, sparse}, {2, 1, 0});\n')
  file.write('tensor format d2d1d0 = ({ dense,  dense,  dense}, {2, 1, 0});\n')
  file.write('\n')
  file.write('tensor format s0s1 = ({sparse, sparse}, {0, 1});\n')
  file.write('tensor format d0s1 = ({ dense, sparse}, {0, 1});\n')
  file.write('tensor format s0d1 = ({sparse,  dense}, {0, 1});\n')
  file.write('tensor format d0d1 = ({ dense,  dense}, {0, 1});\n')
  file.write('tensor format s1s0 = ({sparse, sparse}, {1, 0});\n')
  file.write('tensor format d1s0 = ({ dense, sparse}, {1, 0});\n')
  file.write('tensor format s1d0 = ({sparse,  dense}, {1, 0});\n')
  file.write('tensor format d1d0 = ({ dense,  dense}, {1, 0});\n')
  file.write('\n')
  file.write('double result[] = {0.0, 1.125, 0.0, 0.0, 3.0, 0.0, 0.0, 1.25, 2.0, 0.0, 0.0, 0.0, 3.0, 1.0, 3.0, 1.25};\n')
  file.write('\n')
  file.write('char err = 0;\n')
  file.write('\n')
  file.write('template<a, b, c, d>\n')
  file.write('void compute(a A, b B, c C, d D, int id) {\n')
  file.write('  tensor A(i,j) = B(i,k,l) * C(l,j) * D(k,j);\n')
  file.write('  for(int i = 0; i < 4; i++) {\n')
  file.write('    for(int j = 0; j < 4; j++) {\n')
  file.write('      double val = value(A)(i, j);\n')
  file.write('      double exp = result[i * 4 + j];\n')
  file.write('      if(val != exp) {\n')
  file.write('        fprintf(stderr, "Assert %d failed (id %d). Got %f, expected %f.\\n", i * 4 + j, id, val, exp);\n')
  file.write('        err = 1;\n')
  file.write('      }\n')
  file.write('    }\n')
  file.write('  }\n')
  file.write('}\n')
  file.write('\n')
  file.write('template<a>\n')
  file.write('void fillB(a B) {\n')
  file.write('  value(B)(0,0,0) = 2.0;\n')
  file.write('  value(B)(0,3,0) = 0.5;\n')
  file.write('  value(B)(1,3,1) = 1.0;\n')
  file.write('  value(B)(2,3,3) = 2.0;\n')
  file.write('  value(B)(3,1,0) = 2.0;\n')
  file.write('  value(B)(3,3,1) = 1.0;\n')
  file.write('}\n')
  file.write('\n')
  file.write('template<a>\n')
  file.write('void fillC(a C) {\n')
  file.write('  value(C)(0,1) = 0.5;\n')
  file.write('  value(C)(0,2) = 1.0;\n')
  file.write('  value(C)(1,0) = 1.5;\n')
  file.write('  value(C)(1,2) = 2.0;\n')
  file.write('  value(C)(1,3) = 2.5;\n')
  file.write('  value(C)(3,0) = 0.5;\n')
  file.write('}\n')
  file.write('\n')
  file.write('template<a>\n')
  file.write('void fillD(a D) {\n')
  file.write('  value(D)(0,1) = 0.5;\n')
  file.write('  value(D)(1,1) = 1.0;\n')
  file.write('  value(D)(1,2) = 1.5;\n')
  file.write('  value(D)(3,0) = 2.0;\n')
  file.write('  value(D)(3,1) = 2.5;\n')
  file.write('  value(D)(3,3) = 0.5;\n')
  file.write('}\n')
  file.write('\n')
  file.write('template<a>\n')
  file.write('a makeA() {\n')
  file.write('  return build(a)({4, 4});\n')
  file.write('}\n')
  file.write('\n')
  file.write('template<a>\n')
  file.write('a makeB() {\n')
  file.write('  a res = build(a)({4, 4, 4});\n')
  file.write('  inst fillB<a>(res);\n')
  file.write('  return res;\n')
  file.write('}\n')
  file.write('\n')
  file.write('template<a>\n')
  file.write('a makeC() {\n')
  file.write('  a res = build(a)({4, 4});\n')
  file.write('  inst fillC<a>(res);\n')
  file.write('  return res;\n')
  file.write('}\n')
  file.write('\n')
  file.write('template<a>\n')
  file.write('a makeD() {\n')
  file.write('  a res = build(a)({4, 4});\n')
  file.write('  inst fillD<a>(res);\n')
  file.write('  return res;\n')
  file.write('}\n')
  file.write('\n')
  file.write('int main() {\n')

options = [(0,1,0,1,2,0,1,0,1), (0,1,0,1,2,1,0,0,1),
           (0,1,0,1,2,1,0,1,0), (0,1,0,2,1,0,1,0,1),
           (0,1,0,2,1,0,1,1,0), (0,1,0,2,1,1,0,1,0),
           (0,1,1,0,2,0,1,0,1), (0,1,1,0,2,1,0,0,1),
           (0,1,1,2,0,0,1,0,1), (0,1,2,0,1,0,1,0,1),
           (0,1,2,0,1,0,1,1,0), (0,1,2,1,0,0,1,0,1),
           (1,0,0,1,2,1,0,1,0), (1,0,0,2,1,1,0,1,0),
           (1,0,1,0,2,1,0,0,1), (1,0,1,0,2,1,0,1,0),
           (1,0,1,2,0,0,1,0,1), (1,0,1,2,0,1,0,0,1),
           (1,0,1,2,0,1,0,1,0), (1,0,2,0,1,0,1,1,0),
           (1,0,2,0,1,1,0,1,0), (1,0,2,1,0,0,1,0,1),
           (1,0,2,1,0,0,1,1,0), (1,0,2,1,0,1,0,1,0)]
tensors = ["s%ds%ds%d", "s%ds%dd%d", "s%dd%ds%d", "s%dd%dd%d",
           "d%ds%ds%d", "d%ds%dd%d", "d%dd%ds%d", "d%dd%dd%d"]
formats = ["s%ds%d", "s%dd%d", "d%ds%d", "d%dd%d"]

def write_main(files):
  count = 0
  for o in options:
    for fa in formats:
      for fb in tensors:
        for fc in formats:
          for fd in formats:
            a = fa % (o[0], o[1])
            b = fb % (o[2], o[3], o[4])
            c = fc % (o[5], o[6])
            d = fd % (o[7], o[8])
            files[count // 4].write('  inst compute<tensor<%s>, tensor<%s>, tensor<%s>, tensor<%s>>(inst makeA<tensor<%s>>(), inst makeB<tensor<%s>>(), inst makeC<tensor<%s>>(), inst makeD<tensor<%s>>(), %d);\n' % (a, b, c, d, a, b, c, d, count + 1))
            count = count + 1

def write_end(files):
  for file in files:
    file.write('  if(err) exit(1);\n')
    file.write('\n')
    file.write('  return 0;\n')
    file.write('}\n')

files = []
for i in range(0, 3072):
  files.append(open("expr_gen_07_%04d.xc" % (i+1), "w"))
  write_start(files[i])

write_main(files)
write_end(files)
